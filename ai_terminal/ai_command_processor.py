from typing import List
from dataclasses import dataclass
import os
from dotenv import load_dotenv
from google import genai

# Load API key from .env
load_dotenv()
GENAI_API_KEY = os.getenv("GENAI_API_KEY")
if not GENAI_API_KEY:
    raise ValueError("GENAI_API_KEY not found in .env")

@dataclass
class CommandSuggestion:
    command: str
    confidence: float
    explanation: str

class AICommandProcessor:
    """
    AI-powered natural language to shell command translator
    using Google Gemini (1.5 Flash or 2.5 Flash).
    """

    def __init__(self, api_key: str = None, model: str = "gemini-1.5-flash"):
        self.api_key = api_key or GENAI_API_KEY
        self.model = model
        self.client = genai.Client(api_key=self.api_key)

    def is_natural_language(self, text: str) -> bool:
        """Detect if input appears to be a natural language command"""
        text_lower = text.lower()
        keywords = [
            "create","make","delete","remove","show","copy",
            "move","list","display","go to","change"
        ]
        return any(word in text_lower for word in keywords) or len(text.split()) > 2

    def process_natural_language(self, text: str) -> List[CommandSuggestion]:
        """Generate a safe shell command from natural language input"""
        prompt = f"""
You are an assistant for a safe, AI-powered terminal. Translate the following natural language command into a safe command
that exists in this terminal. Only use these commands:

File commands:
- mkdir, ls, rm, cp, mv, cat, touch, pwd, clear

System commands:
- top, free, df, ps

Rules:
1. Only output **a single command** with any needed arguments.
2. Map common natural language requests to the corresponding terminal command:
   - "show CPU usage" → "top"
   - "show memory usage" → "free"
   - "list files" → "ls"
   - "create a file X" → "touch X"
   - "delete file X" → "rm X"
3. Avoid any destructive commands not listed above (no 'rm -rf /', etc.).
4. If unsure, output a harmless command like 'echo <text>'.
5. Only use commands that are implemented in this terminal.

Natural language input:
"{text}"
"""



        try:
            response = self.client.models.generate_content(
                model=self.model,
                contents=prompt
            )

            command_text = response.text.strip()
            if not command_text:
                command_text = f"echo 'No command generated for: {text}'"

            # Debug
            print(f"[DEBUG] Gemini output for '{text}': {command_text}")

            return [CommandSuggestion(
                command=command_text,
                confidence=0.95,
                explanation="Generated by Gemini LLM"
            )]

        except Exception as e:
            return [CommandSuggestion(
                command=f"echo 'Error generating command: {e}'",
                confidence=0.0,
                explanation=f"Error generating command: {e}"
            )]


# --- Quick test ---
if __name__ == "__main__":
    ai = AICommandProcessor()
    test_queries = [
        "create a file a.txt",
        "delete file temp.txt",
        "list all files in current directory",
        "make a folder called test_folder"
    ]
    for q in test_queries:
        suggestions = ai.process_natural_language(q)
        print(f"\nQuery: {q}")
        for s in suggestions:
            print(f"→ Suggested command: {s.command} (confidence: {s.confidence})")
            print(f"   Explanation: {s.explanation}")
